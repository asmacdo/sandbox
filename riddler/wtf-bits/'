import math

import pygame


BLUE = (0, 0, 255)
RED = (255, 0, 0)


class Bit:
    def __init__(self, chart_size, x, y, bit=None):
        self.chart_size = chart_size
        self.x = x
        self._y = y
        self.bit = bit

    @property
    def y(self):
        return self.chart_size[1] - 1 - self._y

    def draw(self, screen):
        try:
            if self.bit:
                color = RED
            else:
                color = BLUE
        except UndefinedException:
            return

        screen_size = screen.get_size()
        stretch_x = screen_size[0] // self.chart_size[0]
        stretch_y = screen_size[1] // self.chart_size[1]
        x = self.x * stretch_x
        y = self.y * stretch_y
        this_bit = pygame.Rect(
            (x, y , stretch_x, stretch_y)
        )
        pygame.draw.rect(
            screen,
            color,
            this_bit
        )


def run():
    running = True
    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False


def main():
    chart_size = (100, 100)
    size_modifier = 5
    display_size = [dimension * size_modifier for dimension in chart_size]
    screen = pygame.display.set_mode(display_size)

    serpinski_triangles(chart_size, screen)
    # mod_serpinski_triangles(chart_size, screen)
    pygame.display.flip()
    # pygame.image.save(screen, "wtf-bits.bmp")
    run()


def mod_serpinski_triangles(chart_size, screen):
    bit_rows = []
    for x in range(0, chart_size[0]):
        bit_row = []
        for y in range(0, chart_size[1]):
            diff = 1
            if x > diff and y > diff:
                diff = max(x % y, y % x)
            try:
                prev_x = bit_rows[x - diff][y].bit or 0
            except Exception:
                prev_x = x or None
            try:
                prev_y = bit_row[y - diff].bit or 0
            except Exception:
                prev_y = y or None

            if prev_x is None and prev_y is None:
                bit = None
            else:
                bit = (prev_x == prev_y )


def serpinski_triangles(chart_size, screen):
    bit_rows = []
    for x in range(0, chart_size[0]):
        bit_row = []
        for y in range(0, chart_size[1]):
            diff = 1
            try:
                prev_x = bit_rows[x - diff][y].bit or 0
            except Exception:
                prev_x = x or None
            try:
                prev_y = bit_row[y - diff].bit or 0
            except Exception:
                prev_y = y or None

            if prev_x is None and prev_y is None:
                bit = None
            else:
                bit = (prev_x == prev_y )




            bit_row.append(Bit(chart_size, x, y, bit))
        bit_rows.append(bit_row)

    for bit_row in bit_rows:
        for bit in bit_row:
            bit.draw(screen)
    print("Done")

main()

